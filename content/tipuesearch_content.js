var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0\xa0 https://mdecd2024.github.io/2a-midag6 \xa0 \n 網誌:\xa0\xa0 https://mdecd2024.github.io/2a-midag6/blog \xa0 \n 簡報:\xa0\xa0 https://mdecd2024.github.io/2a-midag6/reveal/ \xa0 \n 倉儲:\xa0\xa0 https://github.com/mdecd2024/2a-midag6 \xa0 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecd2024/2a-midag6 \xa0 \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mdecd2024.github.io/2a-midag6 \xa0 \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespace', 'text': 'https://github.com/codespaces \n', 'tags': '', 'url': 'Codespace.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'w4', 'text': '', 'tags': '', 'url': 'w4.html'}, {'title': 'w1', 'text': '\n', 'tags': '', 'url': 'w1.html'}, {'title': 'cd2024 2b 3 如何設定 Github 帳號的雙重認證', 'text': '影片字幕 \n \n \n 影片敘述 : \n 因為github政策更改，所以所有用戶必須在時限內雙重認證，不然將會被github鎖定mail，所以本影片利用綁定智慧手環、手機下載 Authy 的免費 Apps ，幫變綁定與認證github驗證碼與成功雙重驗證等等 \n \n 逐字稿 txt 丟至 downloads \n 好所以雙重認證啊其實就是 你在電腦上要登入的話 比方說我這個字所以能夠登入啊 我是已經通過他的雙重認證 查驗 所以你要設定的話你 你必須要登入到github 我就第一次當然不可能雙重認證 然後你進來就要趕快跑到這個帳號 帳號的設定區 然後找到他的這個密碼跟認證這一個 項目 passwords這個是密碼 authentication是認證 然後你給他點進來 然後他這個內建底下這邊啊他這個應該是沒有啟動了 雙重 雙重認證 然後你給他啟動的話像我是綁定 我這個是綁定到 我的手錶 假如你有智慧手錶跟手機可以連的話 你就可以安裝這個 只有這個是免費的 Ok只有這個是免費 那手機也可以安裝這個叫你要的話 你手機就 搜尋一下這個authy app 然後你手機也可以用 OK 好那只有這一個套件是免費可以 把那個密碼因為你在像我在Apple Watch我是可以把手機上的這一個apps 安裝在手錶上 所以你就只要帶手錶不需要帶手機 就這樣 好所以你聽到這裡面啦我們想要讀一下 因為他這邊即便是簡體中文啊 他還是英文啊所以你看 他這邊怎麼講 他說從 因為我們上學期就知道了嘛 從2023的3月 到年底 逐漸的開始強制 所有用戶 都必須要用雙重認證 所以你只要有以前舊的帳號一定記得要趕快設因為他不知道什麼時候 OK 他這裡啊給你45天啊 我給你45天因為你建帳號之後45天內你一定要趕緊把它弄起來沒有的話就進不去了 那舊帳號我就不曉得他的他的policy怎樣然後你的帳號因為沒有雙重認證被鎖定 你只好重建 重建的部分不能用原來的那個email就比較麻煩 因為他每一個email只能 在這個github他們上登記一次 然後那他的使用就是除了連到這邊之外 他其實是利用 利用這一個二維條碼所以你只要看他下面的說明啊 有沒有 這個是我們剛講的帳號下的設定 然後選擇到密碼跟認證 好然後在這個區域在這個區域啊 你點選說我要啟用 雙重認證 英文的話是enable 那你假如 知道這個是啟用之後啊 他這邊就會出現一個二維條碼 所以這個二維條碼你就必須要用你的 手機 打開你的mobile意思就是給他的mobile裡面他會有一個 相機的選項 然後拍這個二維條碼 然後他 基本上他就會秀出啊 你可以輸入到github的 數字 就這樣 然後一旦設好之後很重要的一點啊 好像這個就是二維條碼然後你說那麼完之後很重要的一點啊你一 要下載這一個 回覆的這個字串 他叫做recovery Codes 萬一你的手機壞掉 或者是你的手機不見 你沒辦法用啊因為這個時候你就要靠這個回覆嗎來 取回帳號 就這樣啊這個回覆嗎你要嘛把它存在隨身碟要嗎把它同時送到你 遠端的 比較常用的電子郵箱 那保證說 最後 萬一相關的設定都在手錶或手機上的不見了你還 可以拿這一串是一堆一堆這個編碼的數字加上 來取回你的這個帳號 而且你一定要 把它下載否則它是上面會有一個選項他說你存了之後啊你說我已經存 我的回覆碼 然後這個時候你才可以把兩段因為他很害怕萬一你的這一個兩段式 認證出問題的話這個帳號形同是沒有任何人可以登入 那假如你是付費的話你還可以請他幫你處理 我要去打電話也許要從你的這個帳號因為你付費的他有認證碼 信用卡或者用什麼樣式用什麼方式來付錢對吧你說我就是 也許還可以拿回來但是因為我們是免費的 免費帳號是沒有這個金流的部分所以只靠這一個回覆碼來取回你的認證 好像我們這個影片就可以把它存起來 然後是在這裡', 'tags': '', 'url': 'cd2024 2b 3 如何設定 Github 帳號的雙重認證.html'}, {'title': 'w2', 'text': '', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '\n \n', 'tags': '', 'url': 'w3.html'}]};